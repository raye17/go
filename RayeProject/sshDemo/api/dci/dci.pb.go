// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.29.0--rc3
// source: pb/dci.proto

package dci

import (
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 获取 文件上传的 oss链接
type GetUploadUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthToken         string `protobuf:"bytes,1,opt,name=authToken,proto3" json:"authToken"`
	ProductInstanceId string `protobuf:"bytes,2,opt,name=productInstanceId,proto3" json:"productInstanceId"`
	FileName          string `protobuf:"bytes,3,opt,name=fileName,proto3" json:"fileName"` //  此处传递的是文件的额链接,文件名如果是中文需要
	ClientToken       string `protobuf:"bytes,4,opt,name=clientToken,proto3" json:"clientToken"`
}

func (x *GetUploadUrlRequest) Reset() {
	*x = GetUploadUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUploadUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploadUrlRequest) ProtoMessage() {}

func (x *GetUploadUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploadUrlRequest.ProtoReflect.Descriptor instead.
func (*GetUploadUrlRequest) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{0}
}

func (x *GetUploadUrlRequest) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *GetUploadUrlRequest) GetProductInstanceId() string {
	if x != nil {
		return x.ProductInstanceId
	}
	return ""
}

func (x *GetUploadUrlRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *GetUploadUrlRequest) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

type GetUploadUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqMsgId   string `protobuf:"bytes,1,opt,name=reqMsgId,proto3" json:"reqMsgId"`
	ResultCode string `protobuf:"bytes,2,opt,name=resultCode,proto3" json:"resultCode"`
	ResultMsg  string `protobuf:"bytes,3,opt,name=resultMsg,proto3" json:"resultMsg"`
	Url        string `protobuf:"bytes,4,opt,name=url,proto3" json:"url"`
	FileId     string `protobuf:"bytes,5,opt,name=fileId,proto3" json:"fileId"`
}

func (x *GetUploadUrlResponse) Reset() {
	*x = GetUploadUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUploadUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploadUrlResponse) ProtoMessage() {}

func (x *GetUploadUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploadUrlResponse.ProtoReflect.Descriptor instead.
func (*GetUploadUrlResponse) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{1}
}

func (x *GetUploadUrlResponse) GetReqMsgId() string {
	if x != nil {
		return x.ReqMsgId
	}
	return ""
}

func (x *GetUploadUrlResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *GetUploadUrlResponse) GetResultMsg() string {
	if x != nil {
		return x.ResultMsg
	}
	return ""
}

func (x *GetUploadUrlResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetUploadUrlResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

// Dci user 注册
type AddDciUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertName               string `protobuf:"bytes,1,opt,name=certName,proto3" json:"certName"`
	CertificateNumber      string `protobuf:"bytes,2,opt,name=certificateNumber,proto3" json:"certificateNumber"`
	CertificateType        string `protobuf:"bytes,3,opt,name=certificateType,proto3" json:"certificateType"`
	CertificateFrontFileId string `protobuf:"bytes,4,opt,name=certificateFrontFileId,proto3" json:"certificateFrontFileId"`
	CertificateBackFileId  string `protobuf:"bytes,5,opt,name=certificateBackFileId,proto3" json:"certificateBackFileId"`
	LegalPersonCertName    string `protobuf:"bytes,6,opt,name=legalPersonCertName,proto3" json:"legalPersonCertName"`
	LegalPersonCertType    string `protobuf:"bytes,7,opt,name=legalPersonCertType,proto3" json:"legalPersonCertType"`
	LegalPersonCertNo      string `protobuf:"bytes,8,opt,name=legalPersonCertNo,proto3" json:"legalPersonCertNo"`
	Phone                  string `protobuf:"bytes,9,opt,name=phone,proto3" json:"phone"`
	AreaType               string `protobuf:"bytes,10,opt,name=areaType,proto3" json:"areaType"`
	ClientToken            string `protobuf:"bytes,11,opt,name=clientToken,proto3" json:"clientToken"`
}

func (x *AddDciUserRequest) Reset() {
	*x = AddDciUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDciUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDciUserRequest) ProtoMessage() {}

func (x *AddDciUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDciUserRequest.ProtoReflect.Descriptor instead.
func (*AddDciUserRequest) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{2}
}

func (x *AddDciUserRequest) GetCertName() string {
	if x != nil {
		return x.CertName
	}
	return ""
}

func (x *AddDciUserRequest) GetCertificateNumber() string {
	if x != nil {
		return x.CertificateNumber
	}
	return ""
}

func (x *AddDciUserRequest) GetCertificateType() string {
	if x != nil {
		return x.CertificateType
	}
	return ""
}

func (x *AddDciUserRequest) GetCertificateFrontFileId() string {
	if x != nil {
		return x.CertificateFrontFileId
	}
	return ""
}

func (x *AddDciUserRequest) GetCertificateBackFileId() string {
	if x != nil {
		return x.CertificateBackFileId
	}
	return ""
}

func (x *AddDciUserRequest) GetLegalPersonCertName() string {
	if x != nil {
		return x.LegalPersonCertName
	}
	return ""
}

func (x *AddDciUserRequest) GetLegalPersonCertType() string {
	if x != nil {
		return x.LegalPersonCertType
	}
	return ""
}

func (x *AddDciUserRequest) GetLegalPersonCertNo() string {
	if x != nil {
		return x.LegalPersonCertNo
	}
	return ""
}

func (x *AddDciUserRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *AddDciUserRequest) GetAreaType() string {
	if x != nil {
		return x.AreaType
	}
	return ""
}

func (x *AddDciUserRequest) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

type AddDciUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DciUserId     string `protobuf:"bytes,1,opt,name=dciUserId,proto3" json:"dciUserId"`
	DciUserStatus string `protobuf:"bytes,2,opt,name=dciUserStatus,proto3" json:"dciUserStatus"`
	ResultCode    string `protobuf:"bytes,3,opt,name=resultCode,proto3" json:"resultCode"`
	ResultMsg     string `protobuf:"bytes,4,opt,name=resultMsg,proto3" json:"resultMsg"`
	ReqMsgId      string `protobuf:"bytes,5,opt,name=reqMsgId,proto3" json:"reqMsgId"`
}

func (x *AddDciUserResponse) Reset() {
	*x = AddDciUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDciUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDciUserResponse) ProtoMessage() {}

func (x *AddDciUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDciUserResponse.ProtoReflect.Descriptor instead.
func (*AddDciUserResponse) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{3}
}

func (x *AddDciUserResponse) GetDciUserId() string {
	if x != nil {
		return x.DciUserId
	}
	return ""
}

func (x *AddDciUserResponse) GetDciUserStatus() string {
	if x != nil {
		return x.DciUserStatus
	}
	return ""
}

func (x *AddDciUserResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *AddDciUserResponse) GetResultMsg() string {
	if x != nil {
		return x.ResultMsg
	}
	return ""
}

func (x *AddDciUserResponse) GetReqMsgId() string {
	if x != nil {
		return x.ReqMsgId
	}
	return ""
}

// Dci user 更新
type UpdateDciUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DciUserId       string `protobuf:"bytes,1,opt,name=dciUserId,proto3" json:"dciUserId"`
	CertFrontFileId string `protobuf:"bytes,2,opt,name=certFrontFileId,proto3" json:"certFrontFileId"`
	CertBackFileId  string `protobuf:"bytes,3,opt,name=certBackFileId,proto3" json:"certBackFileId"`
	Phone           string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone"`
	ClientToken     string `protobuf:"bytes,5,opt,name=clientToken,proto3" json:"clientToken"`
}

func (x *UpdateDciUserRequest) Reset() {
	*x = UpdateDciUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDciUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDciUserRequest) ProtoMessage() {}

func (x *UpdateDciUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDciUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateDciUserRequest) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateDciUserRequest) GetDciUserId() string {
	if x != nil {
		return x.DciUserId
	}
	return ""
}

func (x *UpdateDciUserRequest) GetCertFrontFileId() string {
	if x != nil {
		return x.CertFrontFileId
	}
	return ""
}

func (x *UpdateDciUserRequest) GetCertBackFileId() string {
	if x != nil {
		return x.CertBackFileId
	}
	return ""
}

func (x *UpdateDciUserRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UpdateDciUserRequest) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

type UpdateDciUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultCode string `protobuf:"bytes,1,opt,name=resultCode,proto3" json:"resultCode"`
	ResultMsg  string `protobuf:"bytes,2,opt,name=resultMsg,proto3" json:"resultMsg"`
	ReqMsgId   string `protobuf:"bytes,3,opt,name=reqMsgId,proto3" json:"reqMsgId"`
}

func (x *UpdateDciUserResponse) Reset() {
	*x = UpdateDciUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDciUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDciUserResponse) ProtoMessage() {}

func (x *UpdateDciUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDciUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateDciUserResponse) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateDciUserResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *UpdateDciUserResponse) GetResultMsg() string {
	if x != nil {
		return x.ResultMsg
	}
	return ""
}

func (x *UpdateDciUserResponse) GetReqMsgId() string {
	if x != nil {
		return x.ReqMsgId
	}
	return ""
}

// Dci user 查询
type QueryDciUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateType   string `protobuf:"bytes,1,opt,name=certificateType,proto3" json:"certificateType"`
	CertificateNumber string `protobuf:"bytes,2,opt,name=certificateNumber,proto3" json:"certificateNumber"`
	Phone             string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone"`
}

func (x *QueryDciUserRequest) Reset() {
	*x = QueryDciUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDciUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDciUserRequest) ProtoMessage() {}

func (x *QueryDciUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDciUserRequest.ProtoReflect.Descriptor instead.
func (*QueryDciUserRequest) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{6}
}

func (x *QueryDciUserRequest) GetCertificateType() string {
	if x != nil {
		return x.CertificateType
	}
	return ""
}

func (x *QueryDciUserRequest) GetCertificateNumber() string {
	if x != nil {
		return x.CertificateNumber
	}
	return ""
}

func (x *QueryDciUserRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type QueryDciUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DciUserId         string `protobuf:"bytes,1,opt,name=dciUserId,proto3" json:"dciUserId"`
	DciUserStatus     string `protobuf:"bytes,2,opt,name=dciUserStatus,proto3" json:"dciUserStatus"`
	Name              string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	CertificateType   string `protobuf:"bytes,4,opt,name=certificateType,proto3" json:"certificateType"`
	CertificateNumber string `protobuf:"bytes,5,opt,name=certificateNumber,proto3" json:"certificateNumber"`
	Address           string `protobuf:"bytes,6,opt,name=address,proto3" json:"address"`
	CertStartTime     string `protobuf:"bytes,7,opt,name=certStartTime,proto3" json:"certStartTime"`
	CertEndTime       string `protobuf:"bytes,8,opt,name=certEndTime,proto3" json:"certEndTime"`
	LegalPerson       string `protobuf:"bytes,9,opt,name=legalPerson,proto3" json:"legalPerson"`
	ResultCode        string `protobuf:"bytes,10,opt,name=resultCode,proto3" json:"resultCode"`
	ResultMsg         string `protobuf:"bytes,11,opt,name=resultMsg,proto3" json:"resultMsg"`
	ReqMsgId          string `protobuf:"bytes,12,opt,name=reqMsgId,proto3" json:"reqMsgId"`
}

func (x *QueryDciUserResponse) Reset() {
	*x = QueryDciUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDciUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDciUserResponse) ProtoMessage() {}

func (x *QueryDciUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDciUserResponse.ProtoReflect.Descriptor instead.
func (*QueryDciUserResponse) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{7}
}

func (x *QueryDciUserResponse) GetDciUserId() string {
	if x != nil {
		return x.DciUserId
	}
	return ""
}

func (x *QueryDciUserResponse) GetDciUserStatus() string {
	if x != nil {
		return x.DciUserStatus
	}
	return ""
}

func (x *QueryDciUserResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryDciUserResponse) GetCertificateType() string {
	if x != nil {
		return x.CertificateType
	}
	return ""
}

func (x *QueryDciUserResponse) GetCertificateNumber() string {
	if x != nil {
		return x.CertificateNumber
	}
	return ""
}

func (x *QueryDciUserResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *QueryDciUserResponse) GetCertStartTime() string {
	if x != nil {
		return x.CertStartTime
	}
	return ""
}

func (x *QueryDciUserResponse) GetCertEndTime() string {
	if x != nil {
		return x.CertEndTime
	}
	return ""
}

func (x *QueryDciUserResponse) GetLegalPerson() string {
	if x != nil {
		return x.LegalPerson
	}
	return ""
}

func (x *QueryDciUserResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *QueryDciUserResponse) GetResultMsg() string {
	if x != nil {
		return x.ResultMsg
	}
	return ""
}

func (x *QueryDciUserResponse) GetReqMsgId() string {
	if x != nil {
		return x.ReqMsgId
	}
	return ""
}

// Dci work 申领
type CreateDciPreregistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkName                string              `protobuf:"bytes,1,opt,name=workName,proto3" json:"workName"`
	DciUserId               string              `protobuf:"bytes,2,opt,name=dciUserId,proto3" json:"dciUserId"`
	WorkCategory            string              `protobuf:"bytes,3,opt,name=workCategory,proto3" json:"workCategory"`
	WorkFileId              string              `protobuf:"bytes,4,opt,name=workFileId,proto3" json:"workFileId"`
	FileType                string              `protobuf:"bytes,5,opt,name=fileType,proto3" json:"fileType"`
	CreationInfo            *DciCreationInfo    `protobuf:"bytes,6,opt,name=creationInfo,proto3" json:"creationInfo"`
	PublicationInfo         *DciPublicationInfo `protobuf:"bytes,7,opt,name=publicationInfo,proto3" json:"publicationInfo"`
	AuthorName              string              `protobuf:"bytes,8,opt,name=authorName,proto3" json:"authorName"`
	AuthorSignature         string              `protobuf:"bytes,9,opt,name=authorSignature,proto3" json:"authorSignature"`
	OriginalStatement       string              `protobuf:"bytes,10,opt,name=originalStatement,proto3" json:"originalStatement"`
	RightInfo               *DciRightInfo       `protobuf:"bytes,11,opt,name=rightInfo,proto3" json:"rightInfo"`
	PreRegistrationTrueWill string              `protobuf:"bytes,12,opt,name=preRegistrationTrueWill,proto3" json:"preRegistrationTrueWill"`
	CopyrightOwnerIds       []string            `protobuf:"bytes,13,rep,name=copyrightOwnerIds,proto3" json:"copyrightOwnerIds"`
	ClientToken             string              `protobuf:"bytes,14,opt,name=clientToken,proto3" json:"clientToken"`
}

func (x *CreateDciPreregistrationRequest) Reset() {
	*x = CreateDciPreregistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDciPreregistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDciPreregistrationRequest) ProtoMessage() {}

func (x *CreateDciPreregistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDciPreregistrationRequest.ProtoReflect.Descriptor instead.
func (*CreateDciPreregistrationRequest) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{8}
}

func (x *CreateDciPreregistrationRequest) GetWorkName() string {
	if x != nil {
		return x.WorkName
	}
	return ""
}

func (x *CreateDciPreregistrationRequest) GetDciUserId() string {
	if x != nil {
		return x.DciUserId
	}
	return ""
}

func (x *CreateDciPreregistrationRequest) GetWorkCategory() string {
	if x != nil {
		return x.WorkCategory
	}
	return ""
}

func (x *CreateDciPreregistrationRequest) GetWorkFileId() string {
	if x != nil {
		return x.WorkFileId
	}
	return ""
}

func (x *CreateDciPreregistrationRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *CreateDciPreregistrationRequest) GetCreationInfo() *DciCreationInfo {
	if x != nil {
		return x.CreationInfo
	}
	return nil
}

func (x *CreateDciPreregistrationRequest) GetPublicationInfo() *DciPublicationInfo {
	if x != nil {
		return x.PublicationInfo
	}
	return nil
}

func (x *CreateDciPreregistrationRequest) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *CreateDciPreregistrationRequest) GetAuthorSignature() string {
	if x != nil {
		return x.AuthorSignature
	}
	return ""
}

func (x *CreateDciPreregistrationRequest) GetOriginalStatement() string {
	if x != nil {
		return x.OriginalStatement
	}
	return ""
}

func (x *CreateDciPreregistrationRequest) GetRightInfo() *DciRightInfo {
	if x != nil {
		return x.RightInfo
	}
	return nil
}

func (x *CreateDciPreregistrationRequest) GetPreRegistrationTrueWill() string {
	if x != nil {
		return x.PreRegistrationTrueWill
	}
	return ""
}

func (x *CreateDciPreregistrationRequest) GetCopyrightOwnerIds() []string {
	if x != nil {
		return x.CopyrightOwnerIds
	}
	return nil
}

func (x *CreateDciPreregistrationRequest) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

type DciCreationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationNature         string `protobuf:"bytes,1,opt,name=creationNature,proto3" json:"creationNature"`
	CreationCompletionDate string `protobuf:"bytes,2,opt,name=creationCompletionDate,proto3" json:"creationCompletionDate"`
	CreationCompletionCode string `protobuf:"bytes,3,opt,name=creationCompletionCode,proto3" json:"creationCompletionCode"`
}

func (x *DciCreationInfo) Reset() {
	*x = DciCreationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DciCreationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DciCreationInfo) ProtoMessage() {}

func (x *DciCreationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DciCreationInfo.ProtoReflect.Descriptor instead.
func (*DciCreationInfo) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{9}
}

func (x *DciCreationInfo) GetCreationNature() string {
	if x != nil {
		return x.CreationNature
	}
	return ""
}

func (x *DciCreationInfo) GetCreationCompletionDate() string {
	if x != nil {
		return x.CreationCompletionDate
	}
	return ""
}

func (x *DciCreationInfo) GetCreationCompletionCode() string {
	if x != nil {
		return x.CreationCompletionCode
	}
	return ""
}

type DciPublicationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicationStatus    string `protobuf:"bytes,1,opt,name=publicationStatus,proto3" json:"publicationStatus"`
	FirstPublicationDate string `protobuf:"bytes,2,opt,name=firstPublicationDate,proto3" json:"firstPublicationDate"`
	FirstPublicationCode string `protobuf:"bytes,3,opt,name=firstPublicationCode,proto3" json:"firstPublicationCode"`
}

func (x *DciPublicationInfo) Reset() {
	*x = DciPublicationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DciPublicationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DciPublicationInfo) ProtoMessage() {}

func (x *DciPublicationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DciPublicationInfo.ProtoReflect.Descriptor instead.
func (*DciPublicationInfo) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{10}
}

func (x *DciPublicationInfo) GetPublicationStatus() string {
	if x != nil {
		return x.PublicationStatus
	}
	return ""
}

func (x *DciPublicationInfo) GetFirstPublicationDate() string {
	if x != nil {
		return x.FirstPublicationDate
	}
	return ""
}

func (x *DciPublicationInfo) GetFirstPublicationCode() string {
	if x != nil {
		return x.FirstPublicationCode
	}
	return ""
}

type DciRightInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RightScope     string `protobuf:"bytes,1,opt,name=rightScope,proto3" json:"rightScope"`
	RightObtainWay string `protobuf:"bytes,2,opt,name=rightObtainWay,proto3" json:"rightObtainWay"`
	OwnershipWay   string `protobuf:"bytes,3,opt,name=ownershipWay,proto3" json:"ownershipWay"`
}

func (x *DciRightInfo) Reset() {
	*x = DciRightInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DciRightInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DciRightInfo) ProtoMessage() {}

func (x *DciRightInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DciRightInfo.ProtoReflect.Descriptor instead.
func (*DciRightInfo) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{11}
}

func (x *DciRightInfo) GetRightScope() string {
	if x != nil {
		return x.RightScope
	}
	return ""
}

func (x *DciRightInfo) GetRightObtainWay() string {
	if x != nil {
		return x.RightObtainWay
	}
	return ""
}

func (x *DciRightInfo) GetOwnershipWay() string {
	if x != nil {
		return x.OwnershipWay
	}
	return ""
}

type CreateDciPreregistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DciContentId string `protobuf:"bytes,1,opt,name=dciContentId,proto3" json:"dciContentId"`
	ResultCode   string `protobuf:"bytes,2,opt,name=resultCode,proto3" json:"resultCode"`
	ResultMsg    string `protobuf:"bytes,3,opt,name=resultMsg,proto3" json:"resultMsg"`
	ReqMsgId     string `protobuf:"bytes,4,opt,name=reqMsgId,proto3" json:"reqMsgId"`
	ErrorMsg     string `protobuf:"bytes,5,opt,name=errorMsg,proto3" json:"errorMsg"`
}

func (x *CreateDciPreregistrationResponse) Reset() {
	*x = CreateDciPreregistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDciPreregistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDciPreregistrationResponse) ProtoMessage() {}

func (x *CreateDciPreregistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDciPreregistrationResponse.ProtoReflect.Descriptor instead.
func (*CreateDciPreregistrationResponse) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{12}
}

func (x *CreateDciPreregistrationResponse) GetDciContentId() string {
	if x != nil {
		return x.DciContentId
	}
	return ""
}

func (x *CreateDciPreregistrationResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *CreateDciPreregistrationResponse) GetResultMsg() string {
	if x != nil {
		return x.ResultMsg
	}
	return ""
}

func (x *CreateDciPreregistrationResponse) GetReqMsgId() string {
	if x != nil {
		return x.ReqMsgId
	}
	return ""
}

func (x *CreateDciPreregistrationResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// Dci work 查询申领信息
type QueryDciPreregistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DciContentId string `protobuf:"bytes,1,opt,name=dciContentId,proto3" json:"dciContentId"`
}

func (x *QueryDciPreregistrationRequest) Reset() {
	*x = QueryDciPreregistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDciPreregistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDciPreregistrationRequest) ProtoMessage() {}

func (x *QueryDciPreregistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDciPreregistrationRequest.ProtoReflect.Descriptor instead.
func (*QueryDciPreregistrationRequest) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{13}
}

func (x *QueryDciPreregistrationRequest) GetDciContentId() string {
	if x != nil {
		return x.DciContentId
	}
	return ""
}

type QueryDciPreregistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                 string `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	FileHash               string `protobuf:"bytes,2,opt,name=fileHash,proto3" json:"fileHash"`
	FileHashTxHash         string `protobuf:"bytes,3,opt,name=fileHashTxHash,proto3" json:"fileHashTxHash"`
	FileHashBlockHeight    string `protobuf:"bytes,4,opt,name=fileHashBlockHeight,proto3" json:"fileHashBlockHeight"`
	DciCode                string `protobuf:"bytes,5,opt,name=dciCode,proto3" json:"dciCode"`
	DciCodeTxHash          string `protobuf:"bytes,6,opt,name=dciCodeTxHash,proto3" json:"dciCodeTxHash"`
	DciCodeBlockHeight     string `protobuf:"bytes,7,opt,name=dciCodeBlockHeight,proto3" json:"dciCodeBlockHeight"`
	DciCodeFileTxHash      string `protobuf:"bytes,8,opt,name=dciCodeFileTxHash,proto3" json:"dciCodeFileTxHash"`
	DciCodeFileBlockHeight string `protobuf:"bytes,9,opt,name=dciCodeFileBlockHeight,proto3" json:"dciCodeFileBlockHeight"`
	PreRegCertTxHash       string `protobuf:"bytes,10,opt,name=preRegCertTxHash,proto3" json:"preRegCertTxHash"`
	PreRegCertBlockHeight  string `protobuf:"bytes,11,opt,name=preRegCertBlockHeight,proto3" json:"preRegCertBlockHeight"`
	DciCodeTsr             string `protobuf:"bytes,12,opt,name=dciCodeTsr,proto3" json:"dciCodeTsr"`
	DciCodeFileTsr         string `protobuf:"bytes,13,opt,name=dciCodeFileTsr,proto3" json:"dciCodeFileTsr"`
	PreRegCertTsr          string `protobuf:"bytes,14,opt,name=preRegCertTsr,proto3" json:"preRegCertTsr"`
	PreRegCertFileHash     string `protobuf:"bytes,15,opt,name=preRegCertFileHash,proto3" json:"preRegCertFileHash"`
	PreRegCertUrl          string `protobuf:"bytes,16,opt,name=preRegCertUrl,proto3" json:"preRegCertUrl"`
	ApplyObtainDate        string `protobuf:"bytes,17,opt,name=applyObtainDate,proto3" json:"applyObtainDate"`
	DciCodeObtainDate      string `protobuf:"bytes,18,opt,name=dciCodeObtainDate,proto3" json:"dciCodeObtainDate"`
	ErrorReason            string `protobuf:"bytes,19,opt,name=errorReason,proto3" json:"errorReason"`
	ErrorReasonCn          string `protobuf:"bytes,20,opt,name=errorReasonCn,proto3" json:"errorReasonCn"`
	ResultCode             string `protobuf:"bytes,21,opt,name=resultCode,proto3" json:"resultCode"`
	ResultMsg              string `protobuf:"bytes,22,opt,name=resultMsg,proto3" json:"resultMsg"`
	ReqMsgId               string `protobuf:"bytes,23,opt,name=reqMsgId,proto3" json:"reqMsgId"`
}

func (x *QueryDciPreregistrationResponse) Reset() {
	*x = QueryDciPreregistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDciPreregistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDciPreregistrationResponse) ProtoMessage() {}

func (x *QueryDciPreregistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDciPreregistrationResponse.ProtoReflect.Descriptor instead.
func (*QueryDciPreregistrationResponse) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{14}
}

func (x *QueryDciPreregistrationResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetFileHashTxHash() string {
	if x != nil {
		return x.FileHashTxHash
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetFileHashBlockHeight() string {
	if x != nil {
		return x.FileHashBlockHeight
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetDciCode() string {
	if x != nil {
		return x.DciCode
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetDciCodeTxHash() string {
	if x != nil {
		return x.DciCodeTxHash
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetDciCodeBlockHeight() string {
	if x != nil {
		return x.DciCodeBlockHeight
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetDciCodeFileTxHash() string {
	if x != nil {
		return x.DciCodeFileTxHash
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetDciCodeFileBlockHeight() string {
	if x != nil {
		return x.DciCodeFileBlockHeight
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetPreRegCertTxHash() string {
	if x != nil {
		return x.PreRegCertTxHash
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetPreRegCertBlockHeight() string {
	if x != nil {
		return x.PreRegCertBlockHeight
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetDciCodeTsr() string {
	if x != nil {
		return x.DciCodeTsr
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetDciCodeFileTsr() string {
	if x != nil {
		return x.DciCodeFileTsr
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetPreRegCertTsr() string {
	if x != nil {
		return x.PreRegCertTsr
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetPreRegCertFileHash() string {
	if x != nil {
		return x.PreRegCertFileHash
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetPreRegCertUrl() string {
	if x != nil {
		return x.PreRegCertUrl
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetApplyObtainDate() string {
	if x != nil {
		return x.ApplyObtainDate
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetDciCodeObtainDate() string {
	if x != nil {
		return x.DciCodeObtainDate
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetErrorReason() string {
	if x != nil {
		return x.ErrorReason
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetErrorReasonCn() string {
	if x != nil {
		return x.ErrorReasonCn
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetResultMsg() string {
	if x != nil {
		return x.ResultMsg
	}
	return ""
}

func (x *QueryDciPreregistrationResponse) GetReqMsgId() string {
	if x != nil {
		return x.ReqMsgId
	}
	return ""
}

// 数登  发起申请
type CreateDciRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DciContentId       string              `protobuf:"bytes,1,opt,name=dciContentId,proto3" json:"dciContentId"`
	ExplanationInfo    *DciExplanationInfo `protobuf:"bytes,2,opt,name=explanationInfo,proto3" json:"explanationInfo"`
	InvoiceInfo        *InvoiceInfo        `protobuf:"bytes,3,opt,name=invoiceInfo,proto3" json:"invoiceInfo"`
	AdditionalFileInfo *AdditionalFileInfo `protobuf:"bytes,4,opt,name=additionalFileInfo,proto3" json:"additionalFileInfo"`
	ClientToken        string              `protobuf:"bytes,5,opt,name=clientToken,proto3" json:"clientToken"`
}

func (x *CreateDciRegistrationRequest) Reset() {
	*x = CreateDciRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDciRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDciRegistrationRequest) ProtoMessage() {}

func (x *CreateDciRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDciRegistrationRequest.ProtoReflect.Descriptor instead.
func (*CreateDciRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{15}
}

func (x *CreateDciRegistrationRequest) GetDciContentId() string {
	if x != nil {
		return x.DciContentId
	}
	return ""
}

func (x *CreateDciRegistrationRequest) GetExplanationInfo() *DciExplanationInfo {
	if x != nil {
		return x.ExplanationInfo
	}
	return nil
}

func (x *CreateDciRegistrationRequest) GetInvoiceInfo() *InvoiceInfo {
	if x != nil {
		return x.InvoiceInfo
	}
	return nil
}

func (x *CreateDciRegistrationRequest) GetAdditionalFileInfo() *AdditionalFileInfo {
	if x != nil {
		return x.AdditionalFileInfo
	}
	return nil
}

func (x *CreateDciRegistrationRequest) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

type DciExplanationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationPurpose string `protobuf:"bytes,1,opt,name=creationPurpose,proto3" json:"creationPurpose"`
	CreationProcess string `protobuf:"bytes,2,opt,name=creationProcess,proto3" json:"creationProcess"`
	Originality     string `protobuf:"bytes,3,opt,name=originality,proto3" json:"originality"`
	FontCopyright   string `protobuf:"bytes,4,opt,name=fontCopyright,proto3" json:"fontCopyright"`
}

func (x *DciExplanationInfo) Reset() {
	*x = DciExplanationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DciExplanationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DciExplanationInfo) ProtoMessage() {}

func (x *DciExplanationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DciExplanationInfo.ProtoReflect.Descriptor instead.
func (*DciExplanationInfo) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{16}
}

func (x *DciExplanationInfo) GetCreationPurpose() string {
	if x != nil {
		return x.CreationPurpose
	}
	return ""
}

func (x *DciExplanationInfo) GetCreationProcess() string {
	if x != nil {
		return x.CreationProcess
	}
	return ""
}

func (x *DciExplanationInfo) GetOriginality() string {
	if x != nil {
		return x.Originality
	}
	return ""
}

func (x *DciExplanationInfo) GetFontCopyright() string {
	if x != nil {
		return x.FontCopyright
	}
	return ""
}

type InvoiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceType       string `protobuf:"bytes,1,opt,name=invoiceType,proto3" json:"invoiceType"`
	InvoiceHeader     string `protobuf:"bytes,2,opt,name=invoiceHeader,proto3" json:"invoiceHeader"`
	TaxpayerNumber    string `protobuf:"bytes,3,opt,name=taxpayerNumber,proto3" json:"taxpayerNumber"`
	RegisteredAddress string `protobuf:"bytes,4,opt,name=registeredAddress,proto3" json:"registeredAddress"`
	RegisteredTel     string `protobuf:"bytes,5,opt,name=registeredTel,proto3" json:"registeredTel"`
	OpenAccountTel    string `protobuf:"bytes,6,opt,name=openAccountTel,proto3" json:"openAccountTel"`
	OpenAccountBank   string `protobuf:"bytes,7,opt,name=openAccountBank,proto3" json:"openAccountBank"`
	BankAccount       string `protobuf:"bytes,8,opt,name=bankAccount,proto3" json:"bankAccount"`
}

func (x *InvoiceInfo) Reset() {
	*x = InvoiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceInfo) ProtoMessage() {}

func (x *InvoiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceInfo.ProtoReflect.Descriptor instead.
func (*InvoiceInfo) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{17}
}

func (x *InvoiceInfo) GetInvoiceType() string {
	if x != nil {
		return x.InvoiceType
	}
	return ""
}

func (x *InvoiceInfo) GetInvoiceHeader() string {
	if x != nil {
		return x.InvoiceHeader
	}
	return ""
}

func (x *InvoiceInfo) GetTaxpayerNumber() string {
	if x != nil {
		return x.TaxpayerNumber
	}
	return ""
}

func (x *InvoiceInfo) GetRegisteredAddress() string {
	if x != nil {
		return x.RegisteredAddress
	}
	return ""
}

func (x *InvoiceInfo) GetRegisteredTel() string {
	if x != nil {
		return x.RegisteredTel
	}
	return ""
}

func (x *InvoiceInfo) GetOpenAccountTel() string {
	if x != nil {
		return x.OpenAccountTel
	}
	return ""
}

func (x *InvoiceInfo) GetOpenAccountBank() string {
	if x != nil {
		return x.OpenAccountBank
	}
	return ""
}

func (x *InvoiceInfo) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

type AdditionalFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentSummaryFileId string   `protobuf:"bytes,1,opt,name=contentSummaryFileId,proto3" json:"contentSummaryFileId"`
	OwnershipFileIds     []string `protobuf:"bytes,2,rep,name=ownershipFileIds,proto3" json:"ownershipFileIds"`
	PortraitAuthFileId   string   `protobuf:"bytes,3,opt,name=portraitAuthFileId,proto3" json:"portraitAuthFileId"`
	OthersWorkAuthFileId string   `protobuf:"bytes,4,opt,name=othersWorkAuthFileId,proto3" json:"othersWorkAuthFileId"`
	OtherFileIdList      []string `protobuf:"bytes,5,rep,name=otherFileIdList,proto3" json:"otherFileIdList"`
}

func (x *AdditionalFileInfo) Reset() {
	*x = AdditionalFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalFileInfo) ProtoMessage() {}

func (x *AdditionalFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalFileInfo.ProtoReflect.Descriptor instead.
func (*AdditionalFileInfo) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{18}
}

func (x *AdditionalFileInfo) GetContentSummaryFileId() string {
	if x != nil {
		return x.ContentSummaryFileId
	}
	return ""
}

func (x *AdditionalFileInfo) GetOwnershipFileIds() []string {
	if x != nil {
		return x.OwnershipFileIds
	}
	return nil
}

func (x *AdditionalFileInfo) GetPortraitAuthFileId() string {
	if x != nil {
		return x.PortraitAuthFileId
	}
	return ""
}

func (x *AdditionalFileInfo) GetOthersWorkAuthFileId() string {
	if x != nil {
		return x.OthersWorkAuthFileId
	}
	return ""
}

func (x *AdditionalFileInfo) GetOtherFileIdList() []string {
	if x != nil {
		return x.OtherFileIdList
	}
	return nil
}

type CreateDciRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigitalRegisterId string `protobuf:"bytes,1,opt,name=digitalRegisterId,proto3" json:"digitalRegisterId"`
	ResultCode        string `protobuf:"bytes,2,opt,name=resultCode,proto3" json:"resultCode"`
	ResultMsg         string `protobuf:"bytes,3,opt,name=resultMsg,proto3" json:"resultMsg"`
	ReqMsgId          string `protobuf:"bytes,4,opt,name=reqMsgId,proto3" json:"reqMsgId"`
	ErrorMsg          string `protobuf:"bytes,5,opt,name=errorMsg,proto3" json:"errorMsg"`
}

func (x *CreateDciRegistrationResponse) Reset() {
	*x = CreateDciRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDciRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDciRegistrationResponse) ProtoMessage() {}

func (x *CreateDciRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDciRegistrationResponse.ProtoReflect.Descriptor instead.
func (*CreateDciRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{19}
}

func (x *CreateDciRegistrationResponse) GetDigitalRegisterId() string {
	if x != nil {
		return x.DigitalRegisterId
	}
	return ""
}

func (x *CreateDciRegistrationResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *CreateDciRegistrationResponse) GetResultMsg() string {
	if x != nil {
		return x.ResultMsg
	}
	return ""
}

func (x *CreateDciRegistrationResponse) GetReqMsgId() string {
	if x != nil {
		return x.ReqMsgId
	}
	return ""
}

func (x *CreateDciRegistrationResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// 数登  查询申请
type QueryDciRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigitalRegisterId string `protobuf:"bytes,1,opt,name=digitalRegisterId,proto3" json:"digitalRegisterId"`
	DciContentId      string `protobuf:"bytes,2,opt,name=dciContentId,proto3" json:"dciContentId"`
}

func (x *QueryDciRegistrationRequest) Reset() {
	*x = QueryDciRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDciRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDciRegistrationRequest) ProtoMessage() {}

func (x *QueryDciRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDciRegistrationRequest.ProtoReflect.Descriptor instead.
func (*QueryDciRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{20}
}

func (x *QueryDciRegistrationRequest) GetDigitalRegisterId() string {
	if x != nil {
		return x.DigitalRegisterId
	}
	return ""
}

func (x *QueryDciRegistrationRequest) GetDciContentId() string {
	if x != nil {
		return x.DciContentId
	}
	return ""
}

type QueryDciRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegNumber                     string   `protobuf:"bytes,1,opt,name=regNumber,proto3" json:"regNumber"`
	DigitalRegisterId             string   `protobuf:"bytes,2,opt,name=digitalRegisterId,proto3" json:"digitalRegisterId"`
	DciContentId                  string   `protobuf:"bytes,3,opt,name=dciContentId,proto3" json:"dciContentId"`
	DigitalRegisterStatus         string   `protobuf:"bytes,4,opt,name=digitalRegisterStatus,proto3" json:"digitalRegisterStatus"`
	DigitalRegisterApplyTime      string   `protobuf:"bytes,5,opt,name=digitalRegisterApplyTime,proto3" json:"digitalRegisterApplyTime"`
	DigitalRegisterCompletionTime string   `protobuf:"bytes,6,opt,name=digitalRegisterCompletionTime,proto3" json:"digitalRegisterCompletionTime"`
	DownloadTimesLeft             int64    `protobuf:"varint,7,opt,name=downloadTimesLeft,proto3" json:"downloadTimesLeft"`
	InvoiceUrlList                []string `protobuf:"bytes,8,rep,name=invoiceUrlList,proto3" json:"invoiceUrlList"`
	FailDetail                    string   `protobuf:"bytes,9,opt,name=failDetail,proto3" json:"failDetail"`
	AmendType                     string   `protobuf:"bytes,10,opt,name=amendType,proto3" json:"amendType"`
	ApplyFormUrl                  string   `protobuf:"bytes,11,opt,name=applyFormUrl,proto3" json:"applyFormUrl"`
	FlowNumber                    string   `protobuf:"bytes,12,opt,name=flowNumber,proto3" json:"flowNumber"`
	ResultCode                    string   `protobuf:"bytes,13,opt,name=resultCode,proto3" json:"resultCode"`
	ResultMsg                     string   `protobuf:"bytes,14,opt,name=resultMsg,proto3" json:"resultMsg"`
	ReqMsgId                      string   `protobuf:"bytes,15,opt,name=reqMsgId,proto3" json:"reqMsgId"`
}

func (x *QueryDciRegistrationResponse) Reset() {
	*x = QueryDciRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDciRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDciRegistrationResponse) ProtoMessage() {}

func (x *QueryDciRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDciRegistrationResponse.ProtoReflect.Descriptor instead.
func (*QueryDciRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{21}
}

func (x *QueryDciRegistrationResponse) GetRegNumber() string {
	if x != nil {
		return x.RegNumber
	}
	return ""
}

func (x *QueryDciRegistrationResponse) GetDigitalRegisterId() string {
	if x != nil {
		return x.DigitalRegisterId
	}
	return ""
}

func (x *QueryDciRegistrationResponse) GetDciContentId() string {
	if x != nil {
		return x.DciContentId
	}
	return ""
}

func (x *QueryDciRegistrationResponse) GetDigitalRegisterStatus() string {
	if x != nil {
		return x.DigitalRegisterStatus
	}
	return ""
}

func (x *QueryDciRegistrationResponse) GetDigitalRegisterApplyTime() string {
	if x != nil {
		return x.DigitalRegisterApplyTime
	}
	return ""
}

func (x *QueryDciRegistrationResponse) GetDigitalRegisterCompletionTime() string {
	if x != nil {
		return x.DigitalRegisterCompletionTime
	}
	return ""
}

func (x *QueryDciRegistrationResponse) GetDownloadTimesLeft() int64 {
	if x != nil {
		return x.DownloadTimesLeft
	}
	return 0
}

func (x *QueryDciRegistrationResponse) GetInvoiceUrlList() []string {
	if x != nil {
		return x.InvoiceUrlList
	}
	return nil
}

func (x *QueryDciRegistrationResponse) GetFailDetail() string {
	if x != nil {
		return x.FailDetail
	}
	return ""
}

func (x *QueryDciRegistrationResponse) GetAmendType() string {
	if x != nil {
		return x.AmendType
	}
	return ""
}

func (x *QueryDciRegistrationResponse) GetApplyFormUrl() string {
	if x != nil {
		return x.ApplyFormUrl
	}
	return ""
}

func (x *QueryDciRegistrationResponse) GetFlowNumber() string {
	if x != nil {
		return x.FlowNumber
	}
	return ""
}

func (x *QueryDciRegistrationResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *QueryDciRegistrationResponse) GetResultMsg() string {
	if x != nil {
		return x.ResultMsg
	}
	return ""
}

func (x *QueryDciRegistrationResponse) GetReqMsgId() string {
	if x != nil {
		return x.ReqMsgId
	}
	return ""
}

// 数登 数登支付链接获取
type GetDciPayUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigitalRegisterId string `protobuf:"bytes,1,opt,name=digitalRegisterId,proto3" json:"digitalRegisterId"`
	ClientToken       string `protobuf:"bytes,2,opt,name=clientToken,proto3" json:"clientToken"`
}

func (x *GetDciPayUrlRequest) Reset() {
	*x = GetDciPayUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDciPayUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDciPayUrlRequest) ProtoMessage() {}

func (x *GetDciPayUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDciPayUrlRequest.ProtoReflect.Descriptor instead.
func (*GetDciPayUrlRequest) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{22}
}

func (x *GetDciPayUrlRequest) GetDigitalRegisterId() string {
	if x != nil {
		return x.DigitalRegisterId
	}
	return ""
}

func (x *GetDciPayUrlRequest) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

type GetDciPayUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayUrl     string `protobuf:"bytes,12,opt,name=payUrl,proto3" json:"payUrl"`
	Amount     string `protobuf:"bytes,13,opt,name=amount,proto3" json:"amount"`
	ResultCode string `protobuf:"bytes,14,opt,name=resultCode,proto3" json:"resultCode"`
	ResultMsg  string `protobuf:"bytes,15,opt,name=resultMsg,proto3" json:"resultMsg"`
	ReqMsgId   string `protobuf:"bytes,16,opt,name=reqMsgId,proto3" json:"reqMsgId"`
	ErrorMsg   string `protobuf:"bytes,17,opt,name=errorMsg,proto3" json:"errorMsg"`
}

func (x *GetDciPayUrlResponse) Reset() {
	*x = GetDciPayUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDciPayUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDciPayUrlResponse) ProtoMessage() {}

func (x *GetDciPayUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDciPayUrlResponse.ProtoReflect.Descriptor instead.
func (*GetDciPayUrlResponse) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{23}
}

func (x *GetDciPayUrlResponse) GetPayUrl() string {
	if x != nil {
		return x.PayUrl
	}
	return ""
}

func (x *GetDciPayUrlResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *GetDciPayUrlResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *GetDciPayUrlResponse) GetResultMsg() string {
	if x != nil {
		return x.ResultMsg
	}
	return ""
}

func (x *GetDciPayUrlResponse) GetReqMsgId() string {
	if x != nil {
		return x.ReqMsgId
	}
	return ""
}

func (x *GetDciPayUrlResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// 数登 数登支付查询
type QueryDciPayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigitalRegisterId string `protobuf:"bytes,1,opt,name=digitalRegisterId,proto3" json:"digitalRegisterId"`
}

func (x *QueryDciPayRequest) Reset() {
	*x = QueryDciPayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDciPayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDciPayRequest) ProtoMessage() {}

func (x *QueryDciPayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDciPayRequest.ProtoReflect.Descriptor instead.
func (*QueryDciPayRequest) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{24}
}

func (x *QueryDciPayRequest) GetDigitalRegisterId() string {
	if x != nil {
		return x.DigitalRegisterId
	}
	return ""
}

type QueryDciPayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayStatus  string `protobuf:"bytes,12,opt,name=payStatus,proto3" json:"payStatus"`
	ResultCode string `protobuf:"bytes,13,opt,name=resultCode,proto3" json:"resultCode"`
	ResultMsg  string `protobuf:"bytes,14,opt,name=resultMsg,proto3" json:"resultMsg"`
	ReqMsgId   string `protobuf:"bytes,15,opt,name=reqMsgId,proto3" json:"reqMsgId"`
}

func (x *QueryDciPayResponse) Reset() {
	*x = QueryDciPayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDciPayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDciPayResponse) ProtoMessage() {}

func (x *QueryDciPayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDciPayResponse.ProtoReflect.Descriptor instead.
func (*QueryDciPayResponse) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{25}
}

func (x *QueryDciPayResponse) GetPayStatus() string {
	if x != nil {
		return x.PayStatus
	}
	return ""
}

func (x *QueryDciPayResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *QueryDciPayResponse) GetResultMsg() string {
	if x != nil {
		return x.ResultMsg
	}
	return ""
}

func (x *QueryDciPayResponse) GetReqMsgId() string {
	if x != nil {
		return x.ReqMsgId
	}
	return ""
}

// 数登 获取数登证书下载
type GetDciRegistrationcertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigitalRegisterId string `protobuf:"bytes,1,opt,name=digitalRegisterId,proto3" json:"digitalRegisterId"`
	ClientToken       string `protobuf:"bytes,2,opt,name=clientToken,proto3" json:"clientToken"`
}

func (x *GetDciRegistrationcertRequest) Reset() {
	*x = GetDciRegistrationcertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDciRegistrationcertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDciRegistrationcertRequest) ProtoMessage() {}

func (x *GetDciRegistrationcertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDciRegistrationcertRequest.ProtoReflect.Descriptor instead.
func (*GetDciRegistrationcertRequest) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{26}
}

func (x *GetDciRegistrationcertRequest) GetDigitalRegisterId() string {
	if x != nil {
		return x.DigitalRegisterId
	}
	return ""
}

func (x *GetDciRegistrationcertRequest) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

type GetDciRegistrationcertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigitalRegisterStatus string `protobuf:"bytes,1,opt,name=digitalRegisterStatus,proto3" json:"digitalRegisterStatus"`
	DownloadUrl           string `protobuf:"bytes,2,opt,name=downloadUrl,proto3" json:"downloadUrl"`
	DownloadTimesLeft     int64  `protobuf:"varint,3,opt,name=downloadTimesLeft,proto3" json:"downloadTimesLeft"`
	FailDetail            string `protobuf:"bytes,4,opt,name=failDetail,proto3" json:"failDetail"`
	ResultCode            string `protobuf:"bytes,5,opt,name=resultCode,proto3" json:"resultCode"`
	ResultMsg             string `protobuf:"bytes,6,opt,name=resultMsg,proto3" json:"resultMsg"`
	ReqMsgId              string `protobuf:"bytes,7,opt,name=reqMsgId,proto3" json:"reqMsgId"`
}

func (x *GetDciRegistrationcertResponse) Reset() {
	*x = GetDciRegistrationcertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDciRegistrationcertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDciRegistrationcertResponse) ProtoMessage() {}

func (x *GetDciRegistrationcertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDciRegistrationcertResponse.ProtoReflect.Descriptor instead.
func (*GetDciRegistrationcertResponse) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{27}
}

func (x *GetDciRegistrationcertResponse) GetDigitalRegisterStatus() string {
	if x != nil {
		return x.DigitalRegisterStatus
	}
	return ""
}

func (x *GetDciRegistrationcertResponse) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

func (x *GetDciRegistrationcertResponse) GetDownloadTimesLeft() int64 {
	if x != nil {
		return x.DownloadTimesLeft
	}
	return 0
}

func (x *GetDciRegistrationcertResponse) GetFailDetail() string {
	if x != nil {
		return x.FailDetail
	}
	return ""
}

func (x *GetDciRegistrationcertResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *GetDciRegistrationcertResponse) GetResultMsg() string {
	if x != nil {
		return x.ResultMsg
	}
	return ""
}

func (x *GetDciRegistrationcertResponse) GetReqMsgId() string {
	if x != nil {
		return x.ReqMsgId
	}
	return ""
}

// 数登 补正申请
type RetryDciRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigitalRegisterId  string              `protobuf:"bytes,1,opt,name=digitalRegisterId,proto3" json:"digitalRegisterId"`
	DciContentId       string              `protobuf:"bytes,2,opt,name=dciContentId,proto3" json:"dciContentId"`
	ExplanationInfo    *DciExplanationInfo `protobuf:"bytes,3,opt,name=explanationInfo,proto3" json:"explanationInfo"`
	AdditionalFileInfo *AdditionalFileInfo `protobuf:"bytes,4,opt,name=additionalFileInfo,proto3" json:"additionalFileInfo"`
	ClientToken        string              `protobuf:"bytes,5,opt,name=clientToken,proto3" json:"clientToken"`
}

func (x *RetryDciRegistrationRequest) Reset() {
	*x = RetryDciRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryDciRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryDciRegistrationRequest) ProtoMessage() {}

func (x *RetryDciRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryDciRegistrationRequest.ProtoReflect.Descriptor instead.
func (*RetryDciRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{28}
}

func (x *RetryDciRegistrationRequest) GetDigitalRegisterId() string {
	if x != nil {
		return x.DigitalRegisterId
	}
	return ""
}

func (x *RetryDciRegistrationRequest) GetDciContentId() string {
	if x != nil {
		return x.DciContentId
	}
	return ""
}

func (x *RetryDciRegistrationRequest) GetExplanationInfo() *DciExplanationInfo {
	if x != nil {
		return x.ExplanationInfo
	}
	return nil
}

func (x *RetryDciRegistrationRequest) GetAdditionalFileInfo() *AdditionalFileInfo {
	if x != nil {
		return x.AdditionalFileInfo
	}
	return nil
}

func (x *RetryDciRegistrationRequest) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

type RetryDciRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultCode string `protobuf:"bytes,1,opt,name=resultCode,proto3" json:"resultCode"`
	ResultMsg  string `protobuf:"bytes,2,opt,name=resultMsg,proto3" json:"resultMsg"`
	ReqMsgId   string `protobuf:"bytes,3,opt,name=reqMsgId,proto3" json:"reqMsgId"`
	ErrorMsg   string `protobuf:"bytes,4,opt,name=errorMsg,proto3" json:"errorMsg"`
}

func (x *RetryDciRegistrationResponse) Reset() {
	*x = RetryDciRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryDciRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryDciRegistrationResponse) ProtoMessage() {}

func (x *RetryDciRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryDciRegistrationResponse.ProtoReflect.Descriptor instead.
func (*RetryDciRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{29}
}

func (x *RetryDciRegistrationResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *RetryDciRegistrationResponse) GetResultMsg() string {
	if x != nil {
		return x.ResultMsg
	}
	return ""
}

func (x *RetryDciRegistrationResponse) GetReqMsgId() string {
	if x != nil {
		return x.ReqMsgId
	}
	return ""
}

func (x *RetryDciRegistrationResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// 数登 停止申请
type CloseDciRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigitalRegisterId string `protobuf:"bytes,1,opt,name=digitalRegisterId,proto3" json:"digitalRegisterId"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	MobileNo          string `protobuf:"bytes,3,opt,name=mobileNo,proto3" json:"mobileNo"`
	ClientToken       string `protobuf:"bytes,5,opt,name=clientToken,proto3" json:"clientToken"`
}

func (x *CloseDciRegistrationRequest) Reset() {
	*x = CloseDciRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseDciRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseDciRegistrationRequest) ProtoMessage() {}

func (x *CloseDciRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseDciRegistrationRequest.ProtoReflect.Descriptor instead.
func (*CloseDciRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{30}
}

func (x *CloseDciRegistrationRequest) GetDigitalRegisterId() string {
	if x != nil {
		return x.DigitalRegisterId
	}
	return ""
}

func (x *CloseDciRegistrationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloseDciRegistrationRequest) GetMobileNo() string {
	if x != nil {
		return x.MobileNo
	}
	return ""
}

func (x *CloseDciRegistrationRequest) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

type CloseDciRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultCode string `protobuf:"bytes,1,opt,name=resultCode,proto3" json:"resultCode"`
	ResultMsg  string `protobuf:"bytes,2,opt,name=resultMsg,proto3" json:"resultMsg"`
	ReqMsgId   string `protobuf:"bytes,3,opt,name=reqMsgId,proto3" json:"reqMsgId"`
}

func (x *CloseDciRegistrationResponse) Reset() {
	*x = CloseDciRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseDciRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseDciRegistrationResponse) ProtoMessage() {}

func (x *CloseDciRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseDciRegistrationResponse.ProtoReflect.Descriptor instead.
func (*CloseDciRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{31}
}

func (x *CloseDciRegistrationResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *CloseDciRegistrationResponse) GetResultMsg() string {
	if x != nil {
		return x.ResultMsg
	}
	return ""
}

func (x *CloseDciRegistrationResponse) GetReqMsgId() string {
	if x != nil {
		return x.ReqMsgId
	}
	return ""
}

type SubmitDciFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId          string `protobuf:"bytes,1,opt,name=serviceId,proto3" json:"serviceId"`
	ContactName        string `protobuf:"bytes,2,opt,name=contactName,proto3" json:"contactName"`
	ContactPhoneNumber string `protobuf:"bytes,3,opt,name=contactPhoneNumber,proto3" json:"contactPhoneNumber"`
	Message            string `protobuf:"bytes,4,opt,name=message,proto3" json:"message"`
	ClientToken        string `protobuf:"bytes,5,opt,name=clientToken,proto3" json:"clientToken"`
	FeedbackType       string `protobuf:"bytes,6,opt,name=feedbackType,proto3" json:"feedbackType"`
}

func (x *SubmitDciFeedbackRequest) Reset() {
	*x = SubmitDciFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitDciFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitDciFeedbackRequest) ProtoMessage() {}

func (x *SubmitDciFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitDciFeedbackRequest.ProtoReflect.Descriptor instead.
func (*SubmitDciFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{32}
}

func (x *SubmitDciFeedbackRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *SubmitDciFeedbackRequest) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *SubmitDciFeedbackRequest) GetContactPhoneNumber() string {
	if x != nil {
		return x.ContactPhoneNumber
	}
	return ""
}

func (x *SubmitDciFeedbackRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SubmitDciFeedbackRequest) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

func (x *SubmitDciFeedbackRequest) GetFeedbackType() string {
	if x != nil {
		return x.FeedbackType
	}
	return ""
}

type SubmitDciFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultCode string `protobuf:"bytes,1,opt,name=resultCode,proto3" json:"resultCode"`
	ResultMsg  string `protobuf:"bytes,2,opt,name=resultMsg,proto3" json:"resultMsg"`
	ReqMsgId   string `protobuf:"bytes,3,opt,name=reqMsgId,proto3" json:"reqMsgId"`
	Id         string `protobuf:"bytes,4,opt,name=id,proto3" json:"id"`
}

func (x *SubmitDciFeedbackResponse) Reset() {
	*x = SubmitDciFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitDciFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitDciFeedbackResponse) ProtoMessage() {}

func (x *SubmitDciFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitDciFeedbackResponse.ProtoReflect.Descriptor instead.
func (*SubmitDciFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{33}
}

func (x *SubmitDciFeedbackResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *SubmitDciFeedbackResponse) GetResultMsg() string {
	if x != nil {
		return x.ResultMsg
	}
	return ""
}

func (x *SubmitDciFeedbackResponse) GetReqMsgId() string {
	if x != nil {
		return x.ReqMsgId
	}
	return ""
}

func (x *SubmitDciFeedbackResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QueryDciFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *QueryDciFeedbackRequest) Reset() {
	*x = QueryDciFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDciFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDciFeedbackRequest) ProtoMessage() {}

func (x *QueryDciFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDciFeedbackRequest.ProtoReflect.Descriptor instead.
func (*QueryDciFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{34}
}

func (x *QueryDciFeedbackRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QueryDciFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultCode     string `protobuf:"bytes,1,opt,name=resultCode,proto3" json:"resultCode"`
	ResultMsg      string `protobuf:"bytes,2,opt,name=resultMsg,proto3" json:"resultMsg"`
	ReqMsgId       string `protobuf:"bytes,3,opt,name=reqMsgId,proto3" json:"reqMsgId"`
	Id             string `protobuf:"bytes,4,opt,name=id,proto3" json:"id"`
	FeedbackStatus string `protobuf:"bytes,5,opt,name=feedbackStatus,proto3" json:"feedbackStatus"`
	DciContentId   string `protobuf:"bytes,6,opt,name=DciContentId,proto3" json:"DciContentId"`
	Msg            string `protobuf:"bytes,7,opt,name=msg,proto3" json:"msg"`
}

func (x *QueryDciFeedbackResponse) Reset() {
	*x = QueryDciFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_dci_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDciFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDciFeedbackResponse) ProtoMessage() {}

func (x *QueryDciFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_dci_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDciFeedbackResponse.ProtoReflect.Descriptor instead.
func (*QueryDciFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_pb_dci_proto_rawDescGZIP(), []int{35}
}

func (x *QueryDciFeedbackResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *QueryDciFeedbackResponse) GetResultMsg() string {
	if x != nil {
		return x.ResultMsg
	}
	return ""
}

func (x *QueryDciFeedbackResponse) GetReqMsgId() string {
	if x != nil {
		return x.ReqMsgId
	}
	return ""
}

func (x *QueryDciFeedbackResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryDciFeedbackResponse) GetFeedbackStatus() string {
	if x != nil {
		return x.FeedbackStatus
	}
	return ""
}

func (x *QueryDciFeedbackResponse) GetDciContentId() string {
	if x != nil {
		return x.DciContentId
	}
	return ""
}

func (x *QueryDciFeedbackResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_pb_dci_proto protoreflect.FileDescriptor

var file_pb_dci_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x62, 0x2f, 0x64, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03,
	0x64, 0x63, 0x69, 0x1a, 0x13, 0x70, 0x62, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x62, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0xe2, 0xdf, 0x1f, 0x16, 0x2a, 0x12, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6,
	0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xb0, 0x05, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x44,
	0x63, 0x69, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x08, 0x63, 0x65, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0xe2, 0xdf, 0x1f, 0x1c, 0x2a, 0x18, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58,
	0x01, 0x52, 0x08, 0x63, 0x65, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xe2, 0xdf, 0x1f, 0x1c, 0x2a, 0x18, 0xe8, 0xaf,
	0x81, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd,
	0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xe2, 0xdf, 0x1f, 0x1c, 0x2a, 0x18, 0xe8, 0xaf, 0x81, 0xe4,
	0xbb, 0xb6, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8,
	0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe2, 0xdf, 0x1f, 0x28, 0x2a, 0x24, 0xe8,
	0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xe6, 0xad, 0xa3, 0xe9, 0x9d, 0xa2, 0xe6, 0x96, 0x87, 0xe4, 0xbb,
	0xb6, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba,
	0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x16, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x15, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x43, 0x65, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x43,
	0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x43,
	0x65, 0x72, 0x74, 0x4e, 0x6f, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xe2, 0xdf, 0x1f, 0x19, 0x2a, 0x15, 0xe6, 0x89, 0x8b, 0xe6,
	0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9,
	0xba, 0x58, 0x01, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x72,
	0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xe2, 0xdf,
	0x1f, 0x1c, 0x2a, 0x18, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0x9c, 0xb0, 0xe5, 0x8c, 0xba,
	0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x08,
	0x61, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb2, 0x01, 0x0a, 0x12, 0x41,
	0x64, 0x64, 0x44, 0x63, 0x69, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x63, 0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x63, 0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x64, 0x63, 0x69, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x63, 0x69, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d,
	0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22,
	0x8d, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x63, 0x69, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x64, 0x63, 0x69, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xe2, 0xdf, 0x1f,
	0x1b, 0x2a, 0x17, 0x64, 0x63, 0x69, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe4, 0xb8,
	0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x09, 0x64, 0x63,
	0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2c, 0xe2, 0xdf, 0x1f, 0x28, 0x2a, 0x24, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xe6, 0xad,
	0xa3, 0xe9, 0x9d, 0xa2, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84,
	0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x0f,
	0x63, 0x65, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x42, 0x61, 0x63,
	0x6b, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x71, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x63, 0x69, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x63, 0x69, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0xe2, 0xdf, 0x1f, 0x1c, 0x2a, 0x18, 0xe8, 0xaf, 0x81, 0xe4, 0xbb,
	0xb6, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba,
	0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0xe2, 0xdf, 0x1f, 0x1c, 0x2a, 0x18, 0xe8, 0xaf, 0x81, 0xe4, 0xbb, 0xb6, 0xe5,
	0x8f, 0xb7, 0xe7, 0xa0, 0x81, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9,
	0xba, 0x58, 0x01, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xe2, 0xdf, 0x1f, 0x19, 0x2a, 0x15, 0xe6, 0x89, 0x8b,
	0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7,
	0xa9, 0xba, 0x58, 0x01, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0xa4, 0x03, 0x0a, 0x14,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x63, 0x69, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x63, 0x69, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x63, 0x69, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x63, 0x69, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x63, 0x69, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x22, 0xa4, 0x08, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x63, 0x69,
	0x50, 0x72, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xe2, 0xdf, 0x1f, 0x1e, 0x2a, 0x18,
	0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe4, 0xb8, 0x8d, 0xe8,
	0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x78, 0x33, 0x52, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x64, 0x63, 0x69, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xe2, 0xdf, 0x1f, 0x1b, 0x2a,
	0x17, 0x44, 0x43, 0x49, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0xe4, 0xb8, 0x8d, 0xe8,
	0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x09, 0x64, 0x63, 0x69, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xe2, 0xdf, 0x1f,
	0x1c, 0x2a, 0x18, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe4,
	0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0xe2, 0xdf, 0x1f, 0x22, 0x2a, 0x1e, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe6, 0x96, 0x87,
	0xe4, 0xbb, 0xb6, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4,
	0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xe2, 0xdf, 0x1f, 0x1c, 0x2a, 0x18, 0xe6, 0x96, 0x87,
	0xe4, 0xbb, 0xb6, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4,
	0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x5a, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x44, 0x63,
	0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x20, 0xe2,
	0xdf, 0x1f, 0x1c, 0x2a, 0x18, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x63, 0x0a,
	0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x44, 0x63, 0x69,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x20, 0xe2, 0xdf, 0x1f, 0x1c, 0x2a, 0x18, 0xe5, 0x8f, 0x91, 0xe8, 0xa1, 0xa8, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58,
	0x01, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xe2, 0xdf, 0x1f, 0x1c, 0x2a, 0x18, 0xe4, 0xbd,
	0x9c, 0xe8, 0x80, 0x85, 0xe5, 0xa7, 0x93, 0xe5, 0x90, 0x8d, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd,
	0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xe2,
	0xdf, 0x1f, 0x1c, 0x2a, 0x18, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0xe7, 0xbd, 0xb2, 0xe5, 0x90,
	0x8d, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52,
	0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x51,
	0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x44, 0x63, 0x69, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x20, 0xe2, 0xdf, 0x1f, 0x1c, 0x2a, 0x18, 0xe6, 0x9d, 0x83, 0xe5,
	0x88, 0xa9, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8,
	0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x66, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x75, 0x65, 0x57, 0x69, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2c, 0xe2, 0xdf, 0x1f, 0x28, 0x2a, 0x24, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e,
	0xe6, 0x84, 0x8f, 0xe6, 0x84, 0xbf, 0xe8, 0xa1, 0xa8, 0xe8, 0xbe, 0xbe, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01,
	0x52, 0x17, 0x70, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x75, 0x65, 0x57, 0x69, 0x6c, 0x6c, 0x12, 0x5c, 0x0a, 0x11, 0x63, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x2e, 0xe2, 0xdf, 0x1f, 0x2a, 0x2a, 0x26, 0xe8, 0x91, 0x97, 0xe4,
	0xbd, 0x9c, 0xe6, 0x9d, 0x83, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7,
	0xa9, 0xba, 0x58, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xad, 0x02, 0x0a, 0x0f, 0x44, 0x63,
	0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a,
	0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe2, 0xdf, 0x1f, 0x22, 0x2a, 0x1e, 0xe4, 0xbd, 0x9c,
	0xe5, 0x93, 0x81, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe6, 0x80, 0xa7, 0xe8, 0xb4, 0xa8, 0xe4,
	0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x0e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x5e, 0x0a,
	0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe2,
	0xdf, 0x1f, 0x22, 0x2a, 0x1e, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe5, 0xae, 0x8c, 0xe6, 0x88,
	0x90, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba,
	0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a,
	0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xe2,
	0xdf, 0x1f, 0x2e, 0x2a, 0x2a, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x9b, 0xe4, 0xbd,
	0x9c, 0xe5, 0x9c, 0xb0, 0xe7, 0x82, 0xb9, 0xe5, 0x9c, 0xb0, 0xe5, 0x8c, 0xba, 0xe7, 0xbc, 0x96,
	0xe7, 0xa0, 0x81, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58,
	0x01, 0x52, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x12, 0x44, 0x63,
	0x69, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x54, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe2, 0xdf, 0x1f,
	0x22, 0x2a, 0x1e, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe5, 0x8f, 0x91, 0xe8, 0xa1, 0xa8, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9,
	0xba, 0x58, 0x01, 0x52, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe2, 0xdf, 0x1f, 0x22, 0x2a, 0x1e, 0xe9, 0xa6, 0x96, 0xe6,
	0xac, 0xa1, 0xe5, 0x8f, 0x91, 0xe8, 0xa1, 0xa8, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0xe4, 0xb8,
	0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x14, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x66, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x32, 0xe2, 0xdf, 0x1f, 0x2e, 0x2a, 0x2a, 0xe9, 0xa6, 0x96, 0xe6, 0xac, 0xa1, 0xe5, 0x8f,
	0x91, 0xe8, 0xa1, 0xa8, 0xe5, 0x9c, 0xb0, 0xe7, 0x82, 0xb9, 0xe5, 0x9c, 0xb0, 0xe5, 0x8c, 0xba,
	0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7,
	0xa9, 0xba, 0x58, 0x01, 0x52, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x0c, 0x44,
	0x63, 0x69, 0x52, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0a, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0xe2, 0xdf, 0x1f, 0x22, 0x2a, 0x1e, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe6, 0x9d, 0x83,
	0xe5, 0x88, 0xa9, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4,
	0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x62, 0x74, 0x61,
	0x69, 0x6e, 0x57, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe2, 0xdf, 0x1f,
	0x22, 0x2a, 0x1e, 0xe6, 0x9d, 0x83, 0xe5, 0x88, 0xa9, 0xe5, 0x8f, 0x96, 0xe5, 0xbe, 0x97, 0xe6,
	0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9,
	0xba, 0x58, 0x01, 0x52, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e,
	0x57, 0x61, 0x79, 0x12, 0x4a, 0x0a, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x57, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe2, 0xdf, 0x1f, 0x22, 0x2a,
	0x1e, 0xe6, 0x9d, 0x83, 0xe5, 0x88, 0xa9, 0xe5, 0xbd, 0x92, 0xe5, 0xb1, 0x9e, 0xe6, 0x96, 0xb9,
	0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58,
	0x01, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x57, 0x61, 0x79, 0x22,
	0xbc, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x63, 0x69, 0x50, 0x72, 0x65,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x63, 0x69, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x65,
	0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x63, 0x69, 0x50, 0x72, 0x65, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x43, 0x0a, 0x0c, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xe2, 0xdf, 0x1f, 0x1b, 0x2a, 0x17, 0x44, 0x43,
	0x49, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x49, 0x44, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4,
	0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x0c, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa5, 0x07, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x63, 0x69, 0x50, 0x72, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a,
	0x0e, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x54,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x63, 0x69, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x64,
	0x65, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x63, 0x69, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x63, 0x69, 0x43, 0x6f,
	0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x64, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x70, 0x72, 0x65, 0x52, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74, 0x54, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x52, 0x65, 0x67, 0x43,
	0x65, 0x72, 0x74, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x65,
	0x52, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x65, 0x52, 0x65, 0x67,
	0x43, 0x65, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x73, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x73, 0x72, 0x12,
	0x26, 0x0a, 0x0e, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x73,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x64, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x73, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x52, 0x65,
	0x67, 0x43, 0x65, 0x72, 0x74, 0x54, 0x73, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x52, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74, 0x54, 0x73, 0x72, 0x12, 0x2e, 0x0a,
	0x12, 0x70, 0x72, 0x65, 0x52, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x65, 0x52, 0x65,
	0x67, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x52, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x52, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74,
	0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x62, 0x74, 0x61,
	0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x64,
	0x65, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6e, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x8f, 0x03,
	0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x63, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x0c, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xe2, 0xdf, 0x1f, 0x1b, 0x2a, 0x17, 0x44, 0x43, 0x49, 0xe7,
	0x94, 0xb3, 0xe9, 0xa2, 0x86, 0x49, 0x44, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba,
	0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x0c, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64,
	0x63, 0x69, 0x2e, 0x44, 0x63, 0x69, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x26, 0xe2, 0xdf, 0x1f, 0x22, 0x2a, 0x1e, 0xe4, 0xbd, 0x9c,
	0xe5, 0x93, 0x81, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe8, 0xaf, 0xb4, 0xe6, 0x98, 0x8e, 0xe4,
	0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x0f, 0x65,
	0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54,
	0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x20, 0xe2, 0xdf, 0x1f, 0x1c, 0x2a, 0x18, 0xe5, 0x8f, 0x91,
	0xe7, 0xa5, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4,
	0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xc2, 0x02, 0x0a, 0x12, 0x44, 0x63, 0x69, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x22, 0xe2, 0xdf, 0x1f, 0x1e, 0x2a, 0x18, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe7, 0x9b, 0xae,
	0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58,
	0x01, 0x78, 0x33, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xe2,
	0xdf, 0x1f, 0x1e, 0x2a, 0x18, 0xe5, 0x88, 0x9b, 0xe4, 0xbd, 0x9c, 0xe8, 0xbf, 0x87, 0xe7, 0xa8,
	0x8b, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x78,
	0x56, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x48, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe2, 0xdf, 0x1f, 0x22, 0x2a, 0x1b, 0xe7,
	0x8b, 0xac, 0xe5, 0x88, 0x9b, 0xe6, 0x80, 0xa7, 0xe8, 0xaf, 0xb4, 0xe6, 0x98, 0x8e, 0xe4, 0xb8,
	0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x78, 0x8d, 0x01, 0x52,
	0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0d,
	0x66, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0xe2, 0xdf, 0x1f, 0x1c, 0x2a, 0x18, 0xe5, 0xad, 0x97, 0xe4, 0xbd,
	0x93, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba,
	0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x0d, 0x66, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x89, 0x03, 0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xe2, 0xdf, 0x1f, 0x1c, 0x2a,
	0x18, 0xe5, 0x8f, 0x91, 0xe7, 0xa5, 0xa8, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe4, 0xb8, 0x8d,
	0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0xe2, 0xdf, 0x1f, 0x1c, 0x2a, 0x18, 0xe5, 0x8f, 0x91, 0xe7, 0xa5, 0xa8, 0xe6, 0x8a, 0xac,
	0xe5, 0xa4, 0xb4, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58,
	0x01, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x70, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x78, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e,
	0x6f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f,
	0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x82, 0x02, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x73, 0x57, 0x6f, 0x72, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x57, 0x6f, 0x72,
	0x6b, 0x41, 0x75, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x63, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d,
	0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x6f, 0x0a, 0x1b, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x44, 0x63, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x63, 0x69, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x63, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xf8, 0x04, 0x0a,
	0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x63, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x63, 0x69,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x15, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x44, 0x0a, 0x1d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x4c,
	0x65, 0x66, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x61, 0x69, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x6d, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44,
	0x63, 0x69, 0x50, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x50, 0x0a, 0x11, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xe2, 0xdf, 0x1f, 0x1e,
	0x2a, 0x1a, 0xe6, 0x95, 0xb0, 0xe7, 0x99, 0xbb, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0x49, 0x44,
	0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x11,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xbc, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x63, 0x69, 0x50, 0x61,
	0x79, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x79, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x22, 0x66, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x63, 0x69, 0x50, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x22, 0xe2, 0xdf, 0x1f, 0x1e, 0x2a, 0x1a, 0xe6, 0x95, 0xb0, 0xe7, 0x99,
	0xbb, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0x49, 0x44, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4,
	0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x11, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x44, 0x63, 0x69, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x44, 0x63, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x63, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x11,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xe2, 0xdf, 0x1f, 0x1e, 0x2a, 0x1a, 0xe6,
	0x95, 0xb0, 0xe7, 0x99, 0xbb, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0x49, 0x44, 0xe4, 0xb8, 0x8d,
	0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x11, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xa0, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x63, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x4c, 0x65, 0x66, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x69,
	0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x61, 0x69, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x22, 0xc1, 0x02, 0x0a, 0x1b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x44, 0x63, 0x69,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22,
	0xe2, 0xdf, 0x1f, 0x1e, 0x2a, 0x1a, 0xe6, 0x95, 0xb0, 0xe7, 0x99, 0xbb, 0xe7, 0x94, 0xb3, 0xe8,
	0xaf, 0xb7, 0x49, 0x44, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba,
	0x58, 0x01, 0x52, 0x11, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x63, 0x69, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x63, 0x69,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x44, 0x63, 0x69, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x12,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x44, 0x63, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x8d,
	0x02, 0x0a, 0x1b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x63, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50,
	0x0a, 0x11, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xe2, 0xdf, 0x1f, 0x1e, 0x2a,
	0x1a, 0xe6, 0x95, 0xb0, 0xe7, 0x99, 0xbb, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0x49, 0x44, 0xe4,
	0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x58, 0x01, 0x52, 0x11, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25,
	0xe2, 0xdf, 0x1f, 0x21, 0x2a, 0x1b, 0xe9, 0x80, 0x80, 0xe8, 0xb4, 0xb9, 0xe4, 0xba, 0xba, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9,
	0xba, 0x58, 0x01, 0x78, 0x29, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xe2,
	0xdf, 0x1f, 0x1f, 0x2a, 0x1b, 0xe8, 0x81, 0x94, 0xe7, 0xb3, 0xbb, 0xe6, 0x89, 0x8b, 0xe6, 0x9c,
	0xba, 0xe5, 0x8f, 0xb7, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba,
	0x58, 0x01, 0x52, 0x08, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x78,
	0x0a, 0x1c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x63, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xd1, 0x02, 0x0a, 0x18, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x44, 0x63, 0x69, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x2a, 0x08,
	0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x58, 0x01, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d,
	0x2a, 0x09, 0xe8, 0x81, 0x94, 0xe7, 0xb3, 0xbb, 0xe4, 0xba, 0xba, 0x58, 0x01, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x2a, 0x0c, 0xe8, 0x81,
	0x94, 0xe7, 0xb3, 0xbb, 0xe7, 0x94, 0xb5, 0xe8, 0xaf, 0x9d, 0x58, 0x01, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x2a, 0x0c, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0x89, 0xe5,
	0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0x58, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x2a, 0x0c,
	0xe5, 0x8f, 0x8d, 0xe9, 0xa6, 0x88, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x58, 0x01, 0x52, 0x0c,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x85, 0x01, 0x0a,
	0x19, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x44, 0x63, 0x69, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x63, 0x69,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f,
	0x0c, 0x2a, 0x08, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0x89, 0x49, 0x44, 0x58, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xe2, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x63, 0x69, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x44, 0x63, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x63, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x32, 0xeb, 0x09, 0x0a, 0x03, 0x44, 0x63, 0x69, 0x12, 0x43,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x18,
	0x2e, 0x64, 0x63, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x44, 0x63, 0x69, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x16, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x63, 0x69, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x64, 0x63, 0x69, 0x2e,
	0x41, 0x64, 0x64, 0x44, 0x63, 0x69, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x63, 0x69, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x63, 0x69, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x64, 0x63, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x63, 0x69, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x63, 0x69, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x64, 0x63, 0x69,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x63, 0x69, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x63, 0x69, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x67, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x63, 0x69, 0x50, 0x72, 0x65, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x64, 0x63,
	0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x63, 0x69, 0x50, 0x72, 0x65, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x63,
	0x69, 0x50, 0x72, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x63, 0x69, 0x50, 0x72, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x63, 0x69, 0x50, 0x72, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x44, 0x63, 0x69, 0x50, 0x72, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52,
	0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x44, 0x63, 0x69, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x12, 0x1d, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x44, 0x63, 0x69, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x44,
	0x63, 0x69, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x63, 0x69, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1c, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x63, 0x69, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x63, 0x69, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x63, 0x69,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x64,
	0x63, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x63, 0x69, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x63, 0x69, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x63, 0x69, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x64, 0x63,
	0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x63, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x64, 0x63, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x63, 0x69, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x63, 0x69, 0x50, 0x61, 0x79, 0x55, 0x72, 0x6c,
	0x12, 0x18, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x63, 0x69, 0x50, 0x61, 0x79,
	0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x63, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x63, 0x69, 0x50, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x63,
	0x69, 0x50, 0x61, 0x79, 0x12, 0x17, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x63, 0x69, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x64, 0x63, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x63, 0x69, 0x50, 0x61, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x63,
	0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x65, 0x72,
	0x74, 0x12, 0x22, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x63, 0x69, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x63, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x44, 0x63, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x44, 0x63,
	0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x44, 0x63, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x44, 0x63, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x63, 0x69, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x64, 0x63, 0x69, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x63, 0x69,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x64, 0x63, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_dci_proto_rawDescOnce sync.Once
	file_pb_dci_proto_rawDescData = file_pb_dci_proto_rawDesc
)

func file_pb_dci_proto_rawDescGZIP() []byte {
	file_pb_dci_proto_rawDescOnce.Do(func() {
		file_pb_dci_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_dci_proto_rawDescData)
	})
	return file_pb_dci_proto_rawDescData
}

var file_pb_dci_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_pb_dci_proto_goTypes = []interface{}{
	(*GetUploadUrlRequest)(nil),              // 0: dci.GetUploadUrlRequest
	(*GetUploadUrlResponse)(nil),             // 1: dci.GetUploadUrlResponse
	(*AddDciUserRequest)(nil),                // 2: dci.AddDciUserRequest
	(*AddDciUserResponse)(nil),               // 3: dci.AddDciUserResponse
	(*UpdateDciUserRequest)(nil),             // 4: dci.UpdateDciUserRequest
	(*UpdateDciUserResponse)(nil),            // 5: dci.UpdateDciUserResponse
	(*QueryDciUserRequest)(nil),              // 6: dci.QueryDciUserRequest
	(*QueryDciUserResponse)(nil),             // 7: dci.QueryDciUserResponse
	(*CreateDciPreregistrationRequest)(nil),  // 8: dci.CreateDciPreregistrationRequest
	(*DciCreationInfo)(nil),                  // 9: dci.DciCreationInfo
	(*DciPublicationInfo)(nil),               // 10: dci.DciPublicationInfo
	(*DciRightInfo)(nil),                     // 11: dci.DciRightInfo
	(*CreateDciPreregistrationResponse)(nil), // 12: dci.CreateDciPreregistrationResponse
	(*QueryDciPreregistrationRequest)(nil),   // 13: dci.QueryDciPreregistrationRequest
	(*QueryDciPreregistrationResponse)(nil),  // 14: dci.QueryDciPreregistrationResponse
	(*CreateDciRegistrationRequest)(nil),     // 15: dci.CreateDciRegistrationRequest
	(*DciExplanationInfo)(nil),               // 16: dci.DciExplanationInfo
	(*InvoiceInfo)(nil),                      // 17: dci.InvoiceInfo
	(*AdditionalFileInfo)(nil),               // 18: dci.AdditionalFileInfo
	(*CreateDciRegistrationResponse)(nil),    // 19: dci.CreateDciRegistrationResponse
	(*QueryDciRegistrationRequest)(nil),      // 20: dci.QueryDciRegistrationRequest
	(*QueryDciRegistrationResponse)(nil),     // 21: dci.QueryDciRegistrationResponse
	(*GetDciPayUrlRequest)(nil),              // 22: dci.GetDciPayUrlRequest
	(*GetDciPayUrlResponse)(nil),             // 23: dci.GetDciPayUrlResponse
	(*QueryDciPayRequest)(nil),               // 24: dci.QueryDciPayRequest
	(*QueryDciPayResponse)(nil),              // 25: dci.QueryDciPayResponse
	(*GetDciRegistrationcertRequest)(nil),    // 26: dci.GetDciRegistrationcertRequest
	(*GetDciRegistrationcertResponse)(nil),   // 27: dci.GetDciRegistrationcertResponse
	(*RetryDciRegistrationRequest)(nil),      // 28: dci.RetryDciRegistrationRequest
	(*RetryDciRegistrationResponse)(nil),     // 29: dci.RetryDciRegistrationResponse
	(*CloseDciRegistrationRequest)(nil),      // 30: dci.CloseDciRegistrationRequest
	(*CloseDciRegistrationResponse)(nil),     // 31: dci.CloseDciRegistrationResponse
	(*SubmitDciFeedbackRequest)(nil),         // 32: dci.SubmitDciFeedbackRequest
	(*SubmitDciFeedbackResponse)(nil),        // 33: dci.SubmitDciFeedbackResponse
	(*QueryDciFeedbackRequest)(nil),          // 34: dci.QueryDciFeedbackRequest
	(*QueryDciFeedbackResponse)(nil),         // 35: dci.QueryDciFeedbackResponse
}
var file_pb_dci_proto_depIdxs = []int32{
	9,  // 0: dci.CreateDciPreregistrationRequest.creationInfo:type_name -> dci.DciCreationInfo
	10, // 1: dci.CreateDciPreregistrationRequest.publicationInfo:type_name -> dci.DciPublicationInfo
	11, // 2: dci.CreateDciPreregistrationRequest.rightInfo:type_name -> dci.DciRightInfo
	16, // 3: dci.CreateDciRegistrationRequest.explanationInfo:type_name -> dci.DciExplanationInfo
	17, // 4: dci.CreateDciRegistrationRequest.invoiceInfo:type_name -> dci.InvoiceInfo
	18, // 5: dci.CreateDciRegistrationRequest.additionalFileInfo:type_name -> dci.AdditionalFileInfo
	16, // 6: dci.RetryDciRegistrationRequest.explanationInfo:type_name -> dci.DciExplanationInfo
	18, // 7: dci.RetryDciRegistrationRequest.additionalFileInfo:type_name -> dci.AdditionalFileInfo
	0,  // 8: dci.Dci.GetUploadUrl:input_type -> dci.GetUploadUrlRequest
	2,  // 9: dci.Dci.AddDciUser:input_type -> dci.AddDciUserRequest
	4,  // 10: dci.Dci.UpdateDciUser:input_type -> dci.UpdateDciUserRequest
	6,  // 11: dci.Dci.QueryDciUser:input_type -> dci.QueryDciUserRequest
	8,  // 12: dci.Dci.CreateDciPreregistration:input_type -> dci.CreateDciPreregistrationRequest
	13, // 13: dci.Dci.QueryDciPreregistration:input_type -> dci.QueryDciPreregistrationRequest
	32, // 14: dci.Dci.SubmitDciFeedback:input_type -> dci.SubmitDciFeedbackRequest
	34, // 15: dci.Dci.QueryDciFeedback:input_type -> dci.QueryDciFeedbackRequest
	15, // 16: dci.Dci.CreateDciRegistration:input_type -> dci.CreateDciRegistrationRequest
	20, // 17: dci.Dci.QueryDciRegistration:input_type -> dci.QueryDciRegistrationRequest
	22, // 18: dci.Dci.GetDciPayUrl:input_type -> dci.GetDciPayUrlRequest
	24, // 19: dci.Dci.QueryDciPay:input_type -> dci.QueryDciPayRequest
	26, // 20: dci.Dci.GetDciRegistrationcert:input_type -> dci.GetDciRegistrationcertRequest
	28, // 21: dci.Dci.RetryDciRegistration:input_type -> dci.RetryDciRegistrationRequest
	30, // 22: dci.Dci.CloseDciRegistration:input_type -> dci.CloseDciRegistrationRequest
	1,  // 23: dci.Dci.GetUploadUrl:output_type -> dci.GetUploadUrlResponse
	3,  // 24: dci.Dci.AddDciUser:output_type -> dci.AddDciUserResponse
	5,  // 25: dci.Dci.UpdateDciUser:output_type -> dci.UpdateDciUserResponse
	7,  // 26: dci.Dci.QueryDciUser:output_type -> dci.QueryDciUserResponse
	12, // 27: dci.Dci.CreateDciPreregistration:output_type -> dci.CreateDciPreregistrationResponse
	14, // 28: dci.Dci.QueryDciPreregistration:output_type -> dci.QueryDciPreregistrationResponse
	33, // 29: dci.Dci.SubmitDciFeedback:output_type -> dci.SubmitDciFeedbackResponse
	35, // 30: dci.Dci.QueryDciFeedback:output_type -> dci.QueryDciFeedbackResponse
	19, // 31: dci.Dci.CreateDciRegistration:output_type -> dci.CreateDciRegistrationResponse
	21, // 32: dci.Dci.QueryDciRegistration:output_type -> dci.QueryDciRegistrationResponse
	23, // 33: dci.Dci.GetDciPayUrl:output_type -> dci.GetDciPayUrlResponse
	25, // 34: dci.Dci.QueryDciPay:output_type -> dci.QueryDciPayResponse
	27, // 35: dci.Dci.GetDciRegistrationcert:output_type -> dci.GetDciRegistrationcertResponse
	29, // 36: dci.Dci.RetryDciRegistration:output_type -> dci.RetryDciRegistrationResponse
	31, // 37: dci.Dci.CloseDciRegistration:output_type -> dci.CloseDciRegistrationResponse
	23, // [23:38] is the sub-list for method output_type
	8,  // [8:23] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_pb_dci_proto_init() }
func file_pb_dci_proto_init() {
	if File_pb_dci_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_dci_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUploadUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUploadUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDciUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDciUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDciUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDciUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDciUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDciUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDciPreregistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DciCreationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DciPublicationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DciRightInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDciPreregistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDciPreregistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDciPreregistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDciRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DciExplanationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDciRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDciRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDciRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDciPayUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDciPayUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDciPayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDciPayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDciRegistrationcertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDciRegistrationcertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryDciRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryDciRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseDciRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseDciRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitDciFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitDciFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDciFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_dci_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDciFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_dci_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_dci_proto_goTypes,
		DependencyIndexes: file_pb_dci_proto_depIdxs,
		MessageInfos:      file_pb_dci_proto_msgTypes,
	}.Build()
	File_pb_dci_proto = out.File
	file_pb_dci_proto_rawDesc = nil
	file_pb_dci_proto_goTypes = nil
	file_pb_dci_proto_depIdxs = nil
}
